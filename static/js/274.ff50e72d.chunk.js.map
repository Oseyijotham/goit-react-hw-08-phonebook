{"version":3,"file":"static/js/274.ff50e72d.chunk.js","mappings":"gOAAaA,EAAiB,SAAAC,GAAK,OAAIA,EAAMC,SAASA,SAASC,KAAM,EAExDC,EAAuB,SAAAH,GAAK,OAAIA,EAAMI,MAAO,EAE7CC,EAAkB,SAAAL,GAAK,OAAIA,EAAMC,SAASA,SAASK,SAAU,EAE7DC,EAAc,SAAAP,GAAK,OAAIA,EAAMC,SAASA,SAASO,KAAM,ECLlE,GAAgB,UAAY,+BAA+B,mBAAqB,wCAAwC,UAAY,+BAA+B,YAAc,iCAAiC,OAAS,4BAA4B,WAAa,gCAAgC,UAAY,+BAA+B,UAAY,gC,UCkBvVC,EAAS,WAAH,IAAIC,EAAIC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,GAAE,OACrBG,OAAOC,gBAAgB,IAAIC,WAAWN,IAAOO,QAAO,SAACC,EAAIC,GAWvD,OARED,IAFFC,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGV,GAAG,GAAG,E,SCxBKG,EAAc,SAAHC,GAAsB,IAAhBC,EAAQD,EAARC,SACtBC,EAAgBhB,IAChBiB,EAAkBjB,IAClBR,GAAW0B,EAAAA,EAAAA,IAAY5B,GACvB6B,GAAWC,EAAAA,EAAAA,MA8BjB,OACEC,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAAA,UAAcR,SAAA,EAC5BS,EAAAA,EAAAA,KAAA,MAAIF,UAAWC,EAAAA,UAAcR,SAAC,eAC9BM,EAAAA,EAAAA,MAAA,QAAMI,SAxBW,SAAAC,GACnBA,EAAMC,iBACN,IAAMC,EAAcF,EAAMG,OAAO,GAAGC,MAEZtC,EAASuC,MAC/B,SAAAC,GAAO,OAAIA,EAAQC,KAAKC,SAAWN,EAAYM,MAAM,IAGrDC,MAAM,6BAKRhB,GACEiB,EAAAA,EAAAA,IAAW,CAAEH,KAAMP,EAAMG,OAAO,GAAGC,MAAOO,OAAQX,EAAMG,OAAO,GAAGC,SAGpEQ,QAAQC,IAAI,CAAEN,KAAMP,EAAMG,OAAO,GAAGC,MAAOO,OAAQX,EAAMG,OAAO,GAAGC,QAClEJ,EAAMG,OAAOW,QAChB,EAKkClB,UAAWC,EAAAA,YAAgBR,SAAA,EACvDM,EAAAA,EAAAA,MAAA,SAAOC,UAAWC,EAAAA,WAAeR,SAAA,EAC/BS,EAAAA,EAAAA,KAAA,QAAMF,UAAWC,EAAAA,UAAcR,SAAC,WAChCS,EAAAA,EAAAA,KAAA,SACEiB,KAAK,OACLC,YAAY,aACZT,KAAK,OACLU,QAAQ,yHACRC,MAAM,0IACNC,UAAQ,EACRC,aAAa,MACbrC,GAAIO,EACJM,UAAWC,EAAAA,gBAGfF,EAAAA,EAAAA,MAAA,SAAAN,SAAA,EACES,EAAAA,EAAAA,KAAA,QAAMF,UAAWC,EAAAA,UAAcR,SAAC,aAChCS,EAAAA,EAAAA,KAAA,SACEiB,KAAK,MACLC,YAAY,eACZI,aAAa,MACbb,KAAK,SACLY,UAAQ,EACRpC,GAAIQ,EACJK,UAAWC,EAAAA,UACXoB,QAAQ,yFACRC,MAAM,qGAGVpB,EAAAA,EAAAA,KAAA,OAAKF,UAAWC,EAAAA,WAAeR,UAC7BS,EAAAA,EAAAA,KAAA,UACEiB,KAAK,SACLR,KAAK,SACLX,UAAWC,EAAAA,OACXwB,QAjEgB,SAAAC,GACxBA,EAAInB,OAAOoB,MAAMC,UAAY,wCAC7BC,YAAW,WACTH,EAAInB,OAAOoB,MAAMC,UAAY,MAC/B,GAAG,IACL,EA4DqCnC,SAC5B,qBAKJA,IAGP,ECvFA,EAAkC,qCAAlC,EAAuF,mCAAvF,EAAyI,kCAAzI,EAA0L,kCAA1L,EAA2O,kCAA3O,EAAsY,oCCOzXqC,EAAc,SAAHtC,GAAsB,IAAhBC,EAAQD,EAARC,SACtBvB,GAAW0B,EAAAA,EAAAA,IAAY5B,GACvB6B,GAAWC,EAAAA,EAAAA,MACXiC,EAAe,SAAAL,GACnBA,EAAInB,OAAOoB,MAAMC,UAAY,wCAC7BC,YAAW,WACTH,EAAInB,OAAOoB,MAAMC,UAAY,MAC/B,GAAG,KACH/B,GAASmC,EAAAA,EAAAA,IAAcN,EAAInB,OAAOI,MACpC,EACMsB,GAAcrC,EAAAA,EAAAA,IAAYxB,GAEhC,OACE2B,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAoBR,SAAA,EAClCS,EAAAA,EAAAA,KAAA,MAAIF,UAAWC,EAAkBR,SAAC,aACjCA,EACgB,KAAhBwC,GAA0C,IAApB/D,EAASW,SAC9BqB,EAAAA,EAAAA,KAAA,MAAIF,UAAWC,EAAiBR,SAC7BvB,EAASgE,KAAI,SAAAxB,GAAO,OACnBX,EAAAA,EAAAA,MAAA,MAAqBC,UAAWC,EAAiBR,SAAA,EAC/CM,EAAAA,EAAAA,MAAA,QAAMC,UAAWC,EAAiBR,SAAA,CAC/BiB,EAAQC,KAAK,KAAGD,EAAQK,WAE3Bb,EAAAA,EAAAA,KAAA,UACEiB,KAAK,SACLnB,UAAWC,EACXU,KAAMD,EAAQvB,GACdsC,QAASM,EAAatC,SACvB,aATMiB,EAAQvB,GAYZ,QAMjB,EC5CA,GAAgB,UAAY,0BAA0B,UAAY,0BAA0B,aAAe,6BAA6B,aAAe,6BAA6B,aAAe,8B,SCOtLgD,EAAS,WACpB,IAAMC,EAAe1D,IACfR,GAAW0B,EAAAA,EAAAA,IAAY5B,GACvBiE,GAAcrC,EAAAA,EAAAA,IAAYxB,GAC1ByB,GAAWC,EAAAA,EAAAA,MAKXuC,EAAcnE,EAASG,QAC3B,SAAAqC,GAAO,OACLA,EAAQC,KAAK2B,cAAcC,SAASN,EAAYrB,OAAO0B,gBAChC,KAAvBL,EAAYrB,MAAa,IAG7B,OACEb,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAAA,YAAgBR,SAAA,EAC9BM,EAAAA,EAAAA,MAAA,SAAOyC,QAASJ,EAAa3C,SAAA,EAC3BS,EAAAA,EAAAA,KAAA,QAAMF,UAAWC,EAAAA,UAAcR,SAAC,4BAChCS,EAAAA,EAAAA,KAAA,SACEiB,KAAK,OACLC,YAAY,aACZT,KAAK,OACLU,QAAQ,yHACRC,MAAM,0IACNC,UAAQ,EACRkB,SArBa,SAAArC,GACnBP,GAAS6C,EAAAA,EAAAA,GAAUtC,EAAMG,OAAOC,QAChCQ,QAAQC,IAAIb,EAAMG,OAAOC,MAC3B,EAmBQrB,GAAIiD,EACJZ,aAAa,MACbxB,UAAWC,EAAAA,eAIE,KAAhBgC,GAA6C,IAAvBI,EAAYxD,SAC/BqB,EAAAA,EAAAA,KAAA,MAAIF,UAAWC,EAAAA,aAAiBR,SAC7B4C,EAAYH,KAAI,SAAAxB,GAAO,OACtBR,EAAAA,EAAAA,KAAA,MAAqBF,UAAWC,EAAAA,aAAiBR,UAC/CM,EAAAA,EAAAA,MAAA,QAAMC,UAAWC,EAAAA,aAAiBR,SAAA,CAC/BiB,EAAQC,KAAK,KAAGD,EAAQK,WAFpBL,EAAQvB,GAIZ,QAMnB,E,UC9CawD,EAAW,WACtB,IAAM9C,GAAWC,EAAAA,EAAAA,MACXvB,GAAYqB,EAAAA,EAAAA,IAAYtB,GACxBG,GAAQmB,EAAAA,EAAAA,IAAYpB,GAM1B,OAJAoE,EAAAA,EAAAA,YAAU,WACR/C,GAASgD,EAAAA,EAAAA,MACX,GAAG,CAAChD,KAGFK,EAAAA,EAAAA,KAAA,OAAAT,UACEM,EAAAA,EAAAA,MAACR,EAAW,CAAAE,SAAA,CACTlB,IAAcE,IAASyB,EAAAA,EAAAA,KAAA,KAAAT,SAAG,mBAC1BhB,IAASyB,EAAAA,EAAAA,KAAA,KAAAT,SAAG,wBACbS,EAAAA,EAAAA,KAAC4B,EAAW,CAAArC,UACVS,EAAAA,EAAAA,KAACiC,EAAM,UAKjB,EAEA,G","sources":["redux/AppRedux/selectors.jsx","webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","../node_modules/nanoid/index.browser.js","components/ContactForm/ContactForm.jsx","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","components/Contacts/Contacts.jsx"],"sourcesContent":["export const selectContacts = state => state.contacts.contacts.items;\n\nexport const selectContactsFilter = state => state.filter;\n\nexport const selectIsLoading = state => state.contacts.contacts.isLoading;\n\nexport const selectError = state => state.contacts.contacts.error;","// extracted by mini-css-extract-plugin\nexport default {\"phoneBook\":\"ContactForm_phoneBook__Krcs9\",\"phoneBookContainer\":\"ContactForm_phoneBookContainer__zvme-\",\"formTitle\":\"ContactForm_formTitle__N6O4g\",\"formSection\":\"ContactForm_formSection__4wcn3\",\"button\":\"ContactForm_button__eSwX9\",\"buttonArea\":\"ContactForm_buttonArea__IAEoE\",\"formLabel\":\"ContactForm_formLabel__TSwxK\",\"formInput\":\"ContactForm_formInput__GszVU\"};","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","import { addContact } from '../../redux/AppRedux/operations';\nimport { selectContacts } from '../../redux/AppRedux/selectors';\nimport css from './ContactForm.module.css';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { useSelector } from 'react-redux';\nimport { nanoid } from 'nanoid';\n\nexport const ContactForm = ({ children }) => {\n  const contactNameId = nanoid();\n  const contactNumberId = nanoid();\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const handleButtonPress = evt => {\n    evt.target.style.boxShadow = 'inset 0 0 10px 5px rgba(0, 0, 0, 0.3)';\n    setTimeout(() => {\n      evt.target.style.boxShadow = 'none';\n    }, 1000);\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const currentName = event.target[0].value;\n\n    const isNameDuplicate = contacts.some(\n      contact => contact.name.trim() === currentName.trim()\n    );\n    if (isNameDuplicate) {\n      alert('This name already exists');\n\n      return;\n    }\n\n    dispatch(\n      addContact({ name: event.target[0].value, number: event.target[1].value })\n    );\n   \n    console.log({ name: event.target[0].value, number: event.target[1].value });\n     event.target.reset();\n  };\n\n  return (\n    <div className={css.phoneBook}>\n      <h2 className={css.formTitle}>Phonebook</h2>\n      <form onSubmit={handleSubmit} className={css.formSection}>\n        <label className={css.loginLabel}>\n          <span className={css.formLabel}>Name:</span>\n          <input\n            type=\"text\"\n            placeholder=\"Enter Name\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan.\"\n            required\n            autoComplete=\"off\"\n            id={contactNameId}\n            className={css.formInput}\n          />\n        </label>\n        <label>\n          <span className={css.formLabel}>Number:</span>\n          <input\n            type=\"tel\"\n            placeholder=\"Enter Number\"\n            autoComplete=\"off\"\n            name=\"number\"\n            required\n            id={contactNumberId}\n            className={css.formInput}\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          />\n        </label>\n        <div className={css.buttonArea}>\n          <button\n            type=\"submit\"\n            name=\"button\"\n            className={css.button}\n            onClick={handleButtonPress}\n          >\n            Add Contact\n          </button>\n        </div>\n      </form>\n      {children}\n    </div>\n  );\n};\n\nContactForm.propTypes = {\n  children: PropTypes.node,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"contactsSection\":\"ContactList_contactsSection__3KZcT\",\"contactsTitle\":\"ContactList_contactsTitle__gHlpa\",\"contactsList\":\"ContactList_contactsList__7leRd\",\"contactsData\":\"ContactList_contactsData__gZODb\",\"contactsItem\":\"ContactList_contactsItem__x8C9b\",\"contactsDetails\":\"ContactList_contactsDetails__71j6L\",\"contactsName\":\"ContactList_contactsName__6rTA7\",\"contactsButton\":\"ContactList_contactsButton__6hBLW\"};","import { useSelector } from 'react-redux';\nimport { useDispatch } from 'react-redux';\nimport { selectContacts } from '../../redux/AppRedux/selectors';\nimport { selectContactsFilter } from '../../redux/AppRedux/selectors';\nimport { deleteContact } from '../../redux/AppRedux/operations';\nimport css from './ContactList.module.css';\nimport PropTypes from 'prop-types';\n\nexport const ContactList = ({ children }) => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n  const handleDelete = evt => {\n    evt.target.style.boxShadow = 'inset 0 0 10px 5px rgba(0, 0, 0, 0.3)';\n    setTimeout(() => {\n      evt.target.style.boxShadow = 'none';\n    }, 1000);\n    dispatch(deleteContact(evt.target.name));\n  };\n  const filterValue = useSelector(selectContactsFilter);\n\n  return (\n    <div className={css.contactsSection}>\n      <h3 className={css.contactsTitle}>Contacts</h3>\n      {children}\n      {filterValue === '' && contacts.length !== 0 && (\n        <ul className={css.contactsList}>\n          {contacts.map(contact => (\n            <li key={contact.id} className={css.contactsItem}>\n              <span className={css.contactsData}>\n                {contact.name}: {contact.number}\n              </span>\n              <button\n                type=\"submit\"\n                className={css.contactsButton}\n                name={contact.id}\n                onClick={handleDelete}\n              >\n                Delete\n              </button>\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n};\n\nContactList.propTypes = {\n  children: PropTypes.node,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"formLabel\":\"Filter_formLabel__Ozoh5\",\"formInput\":\"Filter_formInput__XNLZn\",\"contactsList\":\"Filter_contactsList__78f6h\",\"contactsItem\":\"Filter_contactsItem__CHFiw\",\"contactsData\":\"Filter_contactsData__q4ogS\"};","import { useSelector } from 'react-redux';\nimport { selectContacts } from '../../redux/AppRedux/selectors';\nimport { selectContactsFilter } from '../../redux/AppRedux/selectors';\nimport { useDispatch } from 'react-redux';\nimport { nanoid } from 'nanoid';\nimport css from './Filter.module.css';\nimport { setFilter } from '../../redux/AppRedux/filterSlice';\n\nexport const Filter = () => {\n  const searchTermId = nanoid();\n  const contacts = useSelector(selectContacts);\n  const filterValue = useSelector(selectContactsFilter);\n  const dispatch = useDispatch();\n  const handleSearch = event => {\n    dispatch(setFilter(event.target.value));\n    console.log(event.target.value);\n  };\n  const bestMatches = contacts.filter(\n    contact =>\n      contact.name.toLowerCase().includes(filterValue.trim().toLowerCase()) &&\n      filterValue.trim() !== ''\n  );\n\n  return (\n    <div className={css.contactList}>\n      <label htmlFor={searchTermId}>\n        <span className={css.formLabel}>Find Contacts By Name:</span>\n        <input\n          type=\"text\"\n          placeholder=\"Enter Name\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan.\"\n          required\n          onChange={handleSearch}\n          id={searchTermId}\n          autoComplete=\"off\"\n          className={css.formInput}\n        />\n      </label>\n\n      {filterValue !== '' && bestMatches.length !== 0 &&(\n          <ul className={css.contactsList}>\n            {bestMatches.map(contact => (\n              <li key={contact.id} className={css.contactsItem}>\n                <span className={css.contactsData}>\n                  {contact.name}: {contact.number}\n                </span>\n              </li>\n            ))}\n          </ul>\n        )}\n    </div>\n  );\n};\n","import { ContactForm } from '../ContactForm/ContactForm';\nimport { ContactList } from '../ContactList/ContactList';\nimport { Filter } from '../Filter/Filter';\nimport { useEffect } from 'react';\nimport { fetchContacts } from '../../redux/AppRedux/operations';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectError, selectIsLoading } from '../../redux/AppRedux/selectors';\n\nexport const Contacts = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div>\n      <ContactForm>\n        {isLoading && !error && <b>Please wait...</b>}\n        {error && <b>There was an error</b>}\n        <ContactList>\n          <Filter />\n        </ContactList>\n      </ContactForm>\n    </div>\n  );\n};\n\nexport default Contacts;\n"],"names":["selectContacts","state","contacts","items","selectContactsFilter","filter","selectIsLoading","isLoading","selectError","error","nanoid","size","arguments","length","undefined","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","ContactForm","_ref","children","contactNameId","contactNumberId","useSelector","dispatch","useDispatch","_jsxs","className","css","_jsx","onSubmit","event","preventDefault","currentName","target","value","some","contact","name","trim","alert","addContact","number","console","log","reset","type","placeholder","pattern","title","required","autoComplete","onClick","evt","style","boxShadow","setTimeout","ContactList","handleDelete","deleteContact","filterValue","map","Filter","searchTermId","bestMatches","toLowerCase","includes","htmlFor","onChange","setFilter","Contacts","useEffect","fetchContacts"],"sourceRoot":""}